#!/usr/bin/env python

import os
import sys
import glob
import time
import signal
import subprocess

from os import path


def display (*args):
	sys.stdout.write(''.join(str(_) for _ in args))
	sys.stdout.flush()


class Alarm (Exception):
	pass


def alarm_handler (number,frame):  # pylint: disable=W0613
	raise Alarm()


def commands (exabgp,daemon,port):
	r = ""
	r += "command lines are:\n"
	r += 'export exabgp_debug_defensive=true\n'
	r += "> env exabgp.tcp.port=%d exabgp.tcp.once=true exabgp.debug.rotate=true exabgp.tcp.bind='' " % port + ' '.join(exabgp) + '\n'
	r += '> env exabgp.tcp.port=%d ' % port + ' '.join(daemon)
	r += '\n'
	return r


def check (exabgp,daemon,group,port):
	directory = os.path.dirname(group)
	configurations = [os.path.join(directory,name) for name in open(group).read().strip().split()]
	sequence_file = group.replace('.group','.sequence')

	if not path.isfile(sequence_file):
		return False

	os.environ['exabgp.tcp.once'] = 'true'
	os.environ['exabgp.tcp.port'] = str(port)
	os.environ['exabgp.debug.defensive'] = 'true'
	os.environ['exabgp.debug.rotate'] = 'true'

	daemon_command = [daemon, sequence_file]
	exabgp_command = [exabgp, '-d'] + configurations

	name = group.split('/')[-1].split('.')[0]

	try:
		daemon = subprocess.Popen(daemon_command, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
		time.sleep(5)
		exabgp = subprocess.Popen(exabgp_command, stdout=subprocess.PIPE, stderr=subprocess.PIPE)

		display(commands(exabgp_command,daemon_command,port))

		exabgp_out,exabgp_err = exabgp.communicate()
		daemon_out,daemon_err = daemon.communicate()

		display(exabgp_out)
		display(exabgp_err)
		display(daemon_out)
		display(daemon_err)
	except Alarm:
		display('failed, killed', name, '\n')

		try: daemon.terminate()
		except OSError: pass
		try: exabgp.terminate()
		except OSError: pass
		time.sleep(1)
		try: daemon.kill()
		except OSError: pass
		try: exabgp.kill()
		except OSError: pass
	except Exception,exc:
		display(str(exc))


def dispatch (exabgp,daemon,groups,port):
	processes = {}
	out,err = '',''

	names = {}
	for group in sorted(groups):
		names[group.split('/')[-1].split('.')[0]] = group

	try:
		display('\n','starting','\n','--------','\n')

		for name in names.keys():
			display(name,' ')
			port += 1
			processes[name] = subprocess.Popen([sys.argv[0],names[name],str(port)], stdout=subprocess.PIPE, stderr=subprocess.PIPE)
		display('\n')
		display('\n','collected','\n','---------','\n')

		success = True
		while success and names.keys():
			for name in list(names.keys()):
				process = processes[name]
				returncode = process.poll()
				if returncode is not None:
					try:
						out,err = process.communicate()
						if 'failed' in out:
							success = False
						else:
							del names[name]
							out,err = '',''
							display(name,' ')
					except (IOError,OSError):
						success = False

			time.sleep(1)
		display('\n')
	except Alarm:
		display('\n\n')
		display('failed, a test is taking more than the allocated time','\n\n')

	if names.keys():
		success = False
		display('alarming','\n','---------','\n')

		for name in names.keys():
			process = processes.get(name,None)
			if process:
				try:
					process.send_signal(signal.SIGALRM)
					display(name,' ')
				except OSError:
					pass
		display('\n')

		display('\n','error','\n','----------','\n')
		if out or err:
			display(out)
			display(err)
		else:
			for name in names.keys():
				process = processes.get(name,None)
				if process:
					out,err = process.communicate()
					display(out)
					display(err)
					display('\n','\n')
					try:
						process.terminate()
					except OSError:
						pass

	return success

if __name__ == '__main__':
	if len(sys.argv) > 2:
		port = sys.argv.pop(2)
	else:
		port = os.environ.get('exabgp.tcp.port','1790')

	if not port.isdigit():
		sys.exit('invalid port value %s' % port)

	port = int(port)
	uid = os.getuid()
	gid = os.getgid()

	if uid and gid and int(port) <= 1024:
		sys.exit('you need to have root privileges to bind to port 79')

	location = path.abspath(path.join(path.realpath(__file__),'..','..','..'))

	exabgp = path.join(location,'sbin','exabgp')
	if not path.isfile(exabgp):
		sys.exit("could not find exabgp")

	conf = path.join(location,'qa','conf')
	if not path.isdir(conf):
		sys.exit('could not find conf folder')

	daemon = path.join(location,'qa','sbin','bgp')
	if not path.isfile(daemon):
		sys.exit('could not find the sequence daemon')

	if len(sys.argv) >= 2:
		group = sys.argv[1]
		success = check(exabgp,daemon,group,port)
	else:
		timeout = 160  # seconds
		signal.signal(signal.SIGALRM, alarm_handler)
		signal.alarm(timeout)

		groups = sorted(glob.glob(os.path.join(location,'qa','conf','*.group')))[::-1]
		success = dispatch(exabgp,daemon,groups,port)

	sys.exit(0 if success else 1)
