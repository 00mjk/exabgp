#!/usr/bin/env python

import asyncore
import socket
import errno
from struct import unpack

#FFFF FFFF FFFF FFFF FFFF FFFF FFFF FFFF 0013 04

keepalive = chr(0xFF)*16 + chr(0x0) + chr(0x13) + chr(0x4)

#!/usr/bin/env python

import asyncore
import socket
from struct import unpack

def dump (value):
	def spaced (value):
		even = None
		for v in value:
			if even is False:
				yield ' '
			yield '%02X' % ord(v)
			even = not even
	return ''.join(spaced(value))

class BGPHandler(asyncore.dispatcher_with_send):
	def setup (self):
		self.handle_read = self.handle_open
		return self

	def read_message (self):
		header = ''
		while len(header) != 19:
			try:
				left = 19-len(header)
				header += self.recv(left)
				print "read message header", dump(header)
				if left: print "missing", left
				if left == 19-len(header): # ugly
					# the TCP session is gone.
					print "TCP closed"
					self.close()
					return None,None
			except socket.error, e:
				if e.args[0] in (errno.EWOULDBLOCK,errno.EAGAIN):
					continue
				raise e

#		print "read header", dump(header)
		length = unpack('!H',header[16:18])[0] - 19
#		print "waiting for", length, "bytes"

		body = ''
		while len(body) != length:
			try:
				left = length-len(body)
				body += self.recv(left)
				print "read message body  ", dump(body)
				if left: print "missing", left
			except socket.error, e:
				if e.args[0] in (errno.EWOULDBLOCK,errno.EAGAIN):
					continue
				raise e

#		print "read body  ", dump(body)
		return header,body

	def handle_open (self):
		# reply with a IBGP response with the same capability (just changing routerID)
		print "reading open"
		header,body = self.read_message()
		routerid = chr((ord(body[8])+1) & 0xFF)
		o = header+body[:8]+routerid+body[9:]
		print "sending open", dump(o)
		self.send(o)
		print "Sending keepalive", dump(keepalive)
		self.send(keepalive)
		self.handle_read = self.handle_keepalive

	def handle_keepalive (self):
		print "reading whatever was sent"
		header,body = self.read_message()
		if header is not None:
			print "sending keepalive"
			self.send(keepalive)

class BGPServer(asyncore.dispatcher):
	def __init__(self, host, port):
		asyncore.dispatcher.__init__(self)
		self.create_socket(socket.AF_INET, socket.SOCK_STREAM)
		self.set_reuse_addr()
		self.bind((host, port))
		self.listen(5)

	def handle_accept(self):
		pair = self.accept()
		if pair is not None:
			sock, addr = pair
			print "new BGP connection from", addr
			handler = BGPHandler(sock).setup()

server = BGPServer('localhost', 179)
asyncore.loop()
